// components/AISearchAssistant.tsx
'use client'
import { useState, useEffect } from 'react'
import { useAISearch } from '@/hooks/useAISearch'
import { trackEvent } from '@/lib/analytics'

export default function AISearchAssistant() {
  const [query, setQuery] = useState('')
  const [context, setContext] = useState<'buying' | 'selling' | 'value'>('buying')
  const [voiceActive, setVoiceActive] = useState(false)
  const { results, suggestions, isSearching } = useAISearch()

  // Voice search integration
  useEffect(() => {
    if ('webkitSpeechRecognition' in window) {
      const recognition = new (window as any).webkitSpeechRecognition()
      recognition.continuous = false
      recognition.interimResults = true
      recognition.lang = 'en-US'

      recognition.onresult = (event: any) => {
        const transcript = event.results[0][0].transcript
        setQuery(transcript)
        trackEvent('voice_search', { query: transcript })
      }

      if (voiceActive) {
        recognition.start()
      } else {
        recognition.stop()
      }

      return () => recognition.stop()
    }
  }, [voiceActive])

  return (
    <div className="relative">
      <div className="bg-white rounded-2xl shadow-2xl p-6 max-w-4xl mx-auto">
        <div className="flex items-center space-x-4 mb-6">
          <div className="flex-1">
            <input
              type="text"
              value={query}
              onChange={(e) => setQuery(e.target.value)}
              placeholder="Ask me anything about Sky Canyon homes..."
              className="w-full px-6 py-4 bg-gray-50 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500 text-lg"
              aria-label="AI-powered property search"
            />
          </div>
          <button
            onClick={() => setVoiceActive(!voiceActive)}
            className={`p-4 rounded-xl transition-all ${
              voiceActive ? 'bg-red-500 text-white animate-pulse' : 'bg-gray-100 hover:bg-gray-200'
            }`}
            aria-label="Voice search"
          >
            <svg className="w-6 h-6" fill="currentColor" viewBox="0 0 20 20">
              <path fillRule="evenodd" d="M7 4a3 3 0 016 0v4a3 3 0 11-6 0V4zm4 10.93A7.001 7.001 0 0017 8a1 1 0 10-2 0A5 5 0 015 8a1 1 0 00-2 0 7.001 7.001 0 006 6.93V17H6a1 1 0 100 2h8a1 1 0 100-2h-3v-2.07z" clipRule="evenodd" />
            </svg>
          </button>
        </div>

        {/* AI Context Selector */}
        <div className="flex space-x-2 mb-4">
          {(['buying', 'selling', 'value'] as const).map((ctx) => (
            <button
              key={ctx}
              onClick={() => setContext(ctx)}
              className={`px-4 py-2 rounded-lg text-sm font-medium transition-all ${
                context === ctx
                  ? 'bg-blue-600 text-white'
                  : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
              }`}
            >
              {ctx === 'buying' && 'üè† Buying'}
              {ctx === 'selling' && 'üí∞ Selling'}
              {ctx === 'value' && 'üìä Home Value'}
            </button>
          ))}
        </div>

        {/* Smart Suggestions */}
        {suggestions.length > 0 && (
          <div className="mb-4">
            <p className="text-sm text-gray-600 mb-2">Popular searches:</p>
            <div className="flex flex-wrap gap-2">
              {suggestions.map((suggestion, idx) => (
                <button
                  key={idx}
                  onClick={() => setQuery(suggestion)}
                  className="px-3 py-1 bg-blue-50 text-blue-700 rounded-full text-sm hover:bg-blue-100"
                >
                  {suggestion}
                </button>
              ))}
            </div>
          </div>
        )}

        {/* Dynamic Results */}
        {isSearching && (
          <div className="text-center py-8">
            <div className="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
          </div>
        )}

        {results && (
          <div className="space-y-4">
            {/* Results would be rendered here */}
          </div>
        )}
      </div>
    </div>
  )
}