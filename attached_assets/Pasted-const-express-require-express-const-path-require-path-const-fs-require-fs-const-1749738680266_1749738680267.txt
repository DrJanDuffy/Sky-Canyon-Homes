const express = require('express');
const path = require('path');
const fs = require('fs');
const cors = require('cors');
const helmet = require('helmet');
const morgan = require('morgan');
const compression = require('compression');

const app = express();
const PORT = process.env.PORT || 5000;
const HOST = process.env.HOST || '0.0.0.0';
const NODE_ENV = process.env.NODE_ENV || 'development';

// Configuration
const config = {
  distDir: path.join(__dirname, 'dist'),
  staticDir: path.join(__dirname, 'public'),
  isProduction: NODE_ENV === 'production'
};

// Middleware setup
app.use(helmet({
  contentSecurityPolicy: false, // Disable for development flexibility
  crossOriginEmbedderPolicy: false
}));

app.use(compression());
app.use(morgan(config.isProduction ? 'combined' : 'dev'));
app.use(cors());
app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true, limit: '10mb' }));

// Health check endpoint
app.get('/health', (req, res) => {
  res.json({
    status: 'ok',
    timestamp: new Date().toISOString(),
    environment: NODE_ENV,
    uptime: process.uptime()
  });
});

// API Routes
app.use('/api', (req, res, next) => {
  res.header('Content-Type', 'application/json');
  next();
});

// Example API endpoints
app.get('/api/status', (req, res) => {
  res.json({
    message: 'API is running',
    version: '1.0.0',
    environment: NODE_ENV
  });
});

app.get('/api/test', (req, res) => {
  res.json({
    message: 'Test endpoint working',
    timestamp: new Date().toISOString()
  });
});

// Static file serving with fallback strategy
const serveStaticFiles = () => {
  // Priority order for serving static files
  const staticOptions = {
    maxAge: config.isProduction ? '1y' : '0',
    etag: true,
    lastModified: true,
    setHeaders: (res, path) => {
      if (path.endsWith('.html')) {
        res.setHeader('Cache-Control', 'no-cache');
      }
    }
  };

  // 1. Try to serve from dist directory (production build)
  if (fs.existsSync(config.distDir)) {
    console.log(`üìÅ Serving static files from: ${config.distDir}`);
    app.use(express.static(config.distDir, staticOptions));
  }

  // 2. Fallback to public directory
  if (fs.existsSync(config.staticDir)) {
    console.log(`üìÅ Fallback static files from: ${config.staticDir}`);
    app.use(express.static(config.staticDir, staticOptions));
  }

  // 3. Fallback to client directory (development)
  const clientDir = path.join(__dirname, 'client');
  if (fs.existsSync(clientDir)) {
    console.log(`üìÅ Development static files from: ${clientDir}`);
    app.use(express.static(clientDir, staticOptions));
  }
};

// Setup static file serving
serveStaticFiles();

// SPA fallback - serve index.html for client-side routing
app.get('*', (req, res, next) => {
  // Skip API routes
  if (req.path.startsWith('/api/')) {
    return next();
  }

  // Try to find and serve index.html
  const indexPaths = [
    path.join(config.distDir, 'index.html'),
    path.join(config.staticDir, 'index.html'),
    path.join(__dirname, 'client', 'index.html'),
    path.join(__dirname, 'index.html')
  ];

  for (const indexPath of indexPaths) {
    if (fs.existsSync(indexPath)) {
      const stat = fs.statSync(indexPath);
      if (stat.isFile()) {
        console.log(`üìÑ Serving index.html from: ${indexPath}`);
        return res.sendFile(indexPath);
      }
    }
  }

  // If no index.html found, serve a basic HTML page
  res.send(`
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Application</title>
        <style>
            body { font-family: system-ui, sans-serif; margin: 40px; line-height: 1.6; }
            .container { max-width: 600px; margin: 0 auto; }
            .status { padding: 20px; background: #f0f9ff; border-radius: 8px; margin: 20px 0; }
            .error { background: #fef2f2; color: #dc2626; }
            code { background: #f3f4f6; padding: 2px 6px; border-radius: 4px; }
        </style>
    </head>
    <body>
        <div class="container">
            <h1>Application Server</h1>
            <div class="status">
                <h3>‚úÖ Server is running</h3>
                <p><strong>Environment:</strong> ${NODE_ENV}</p>
                <p><strong>Port:</strong> ${PORT}</p>
                <p><strong>API Health:</strong> <a href="/health">/health</a></p>
                <p><strong>API Status:</strong> <a href="/api/status">/api/status</a></p>
            </div>
            <div class="status error">
                <h3>‚ö†Ô∏è No client build found</h3>
                <p>Run <code>npm run build</code> to create a production build, or ensure your client files are properly structured.</p>
                <p>Looking for index.html in:</p>
                <ul>
                    ${indexPaths.map(p => `<li><code>${p}</code></li>`).join('')}
                </ul>
            </div>
        </div>
    </body>
    </html>
  `);
});

// API 404 handler
app.use('/api/*', (req, res) => {
  res.status(404).json({
    error: 'API endpoint not found',
    path: req.path,
    method: req.method
  });
});

// Global error handler
app.use((err, req, res, next) => {
  console.error('Server error:', err);
  
  if (req.path.startsWith('/api/')) {
    res.status(500).json({
      error: config.isProduction ? 'Internal server error' : err.message,
      ...(config.isProduction ? {} : { stack: err.stack })
    });
  } else {
    res.status(500).send(`
      <!DOCTYPE html>
      <html>
      <head><title>Server Error</title></head>
      <body>
        <h1>Server Error</h1>
        <p>${config.isProduction ? 'Something went wrong.' : err.message}</p>
        <a href="/">‚Üê Back to home</a>
      </body>
      </html>
    `);
  }
});

// Graceful shutdown
process.on('SIGTERM', () => {
  console.log('üõë SIGTERM received, shutting down gracefully');
  process.exit(0);
});

process.on('SIGINT', () => {
  console.log('üõë SIGINT received, shutting down gracefully');
  process.exit(0);
});

// Start server
const server = app.listen(PORT, HOST, () => {
  console.log(`üöÄ Server running on http://${HOST}:${PORT}`);
  console.log(`üìä Environment: ${NODE_ENV}`);
  console.log(`üìÅ Static files: ${config.distDir}`);
  console.log(`üí° Health check: http://${HOST}:${PORT}/health`);
  console.log(`üîå API base: http://${HOST}:${PORT}/api`);
  
  // Log project structure info
  console.log('\nüìÅ Project structure:');
  const checkDirs = ['dist', 'public', 'client'];
  checkDirs.forEach(dir => {
    const dirPath = path.join(__dirname, dir);
    const exists = fs.existsSync(dirPath);
    const isDir = exists ? fs.statSync(dirPath).isDirectory() : false;
    console.log(`  ${exists ? (isDir ? 'üìÅ' : 'üìÑ') : '‚ùå'} ${dir}/ ${exists ? (isDir ? '(directory)' : '(file!)') : '(missing)'}`);
  });
});

// Handle server errors
server.on('error', (err) => {
  if (err.code === 'EADDRINUSE') {
    console.error(`‚ùå Port ${PORT} is already in use`);
  } else {
    console.error('‚ùå Server error:', err);
  }
  process.exit(1);
});

module.exports = app;