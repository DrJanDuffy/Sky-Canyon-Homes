// components/VoiceAssistant.tsx
'use client'
import { useState, useEffect, useRef } from 'react'
import { useVoiceCommands } from '@/hooks/useVoiceCommands'

export default function VoiceAssistant() {
  const [isListening, setIsListening] = useState(false)
  const [transcript, setTranscript] = useState('')
  const [response, setResponse] = useState('')
  const { processCommand } = useVoiceCommands()
  
  const commands = {
    'show me homes under (\\d+)': async (price: string) => {
      const maxPrice = parseInt(price.replace(/,/g, ''))
      return `Found 12 Sky Canyon homes under $${price}. The best value is at 123 Canyon Vista Dr.`
    },
    'what.*market.*like': async () => {
      return 'The Sky Canyon market is hot! Homes are selling 23% faster than last year with multiple offers common.'
    },
    'schedule.*showing': async () => {
      return "I'll help you schedule a showing. What day works best for you?"
    },
    'home.*worth': async () => {
      return "I can provide a free home valuation. What's your Sky Canyon address?"
    }
  }
  
  return (
    <div className="fixed bottom-6 right-6 z-50">
      {/* Voice Assistant Bubble */}
      <div className="relative">
        <button
          onClick={() => setIsListening(!isListening)}
          className={`
            w-16 h-16 rounded-full shadow-2xl transition-all duration-300
            ${isListening 
              ? 'bg-red-500 animate-pulse scale-110' 
              : 'bg-blue-600 hover:bg-blue-700 hover:scale-105'
            }
          `}
          aria-label="Voice assistant"
        >
          <svg className="w-8 h-8 mx-auto text-white" fill="currentColor" viewBox="0 0 20 20">
            <path fillRule="evenodd" d="M7 4a3 3 0 016 0v4a3 3 0 11-6 0V4zm4 10.93A7.001 7.001 0 0017 8a1 1 0 10-2 0A5 5 0 015 8a1 1 0 00-2 0 7.001 7.001 0 006 6.93V17H6a1 1 0 100 2h8a1 1 0 100-2h-3v-2.07z" clipRule="evenodd" />
          </svg>
        </button>
        
        {/* Listening Indicator */}
        {isListening && (
          <div className="absolute -top-2 -right-2">
            <span className="flex h-3 w-3">
              <span className="animate-ping absolute inline-flex h-full w-full rounded-full bg-red-400 opacity-75"></span>
              <span className="relative inline-flex rounded-full h-3 w-3 bg-red-500"></span>
            </span>
          </div>
        )}
      </div>
      
      {/* Response Display */}
      {response && (
        <div className="absolute bottom-20 right-0 w-80 bg-white rounded-lg shadow-2xl p-4 animate-slideUp">
          <p className="text-sm text-gray-600 mb-2">Dr. Jan says:</p>
          <p className="text-gray-900">{response}</p>
        </div>
      )}
    </div>
  )
}